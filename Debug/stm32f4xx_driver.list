
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f08  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010b0  080010b0  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010b0  080010b0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080010b0  080010b0  000110b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080010b8  080010b8  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010bc  080010bc  000110bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080010c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
 10 .bss          00000028  2000003c  2000003c  0002003c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000064  20000064  0002003c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001402  00000000  00000000  00020066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c7  00000000  00000000  00021468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00021930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  00021a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002649  00000000  00000000  00021bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001883  00000000  00000000  00024211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a3a2  00000000  00000000  00025a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002fe36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000564  00000000  00000000  0002fe88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001098 	.word	0x08001098

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000040 	.word	0x20000040
 80001e4:	08001098 	.word	0x08001098

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b974 	b.w	80004f8 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9e08      	ldr	r6, [sp, #32]
 800022e:	460d      	mov	r5, r1
 8000230:	4604      	mov	r4, r0
 8000232:	4688      	mov	r8, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14d      	bne.n	80002d4 <__udivmoddi4+0xac>
 8000238:	428a      	cmp	r2, r1
 800023a:	4694      	mov	ip, r2
 800023c:	d968      	bls.n	8000310 <__udivmoddi4+0xe8>
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	b152      	cbz	r2, 800025a <__udivmoddi4+0x32>
 8000244:	fa01 f302 	lsl.w	r3, r1, r2
 8000248:	f1c2 0120 	rsb	r1, r2, #32
 800024c:	fa20 f101 	lsr.w	r1, r0, r1
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	ea41 0803 	orr.w	r8, r1, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800025e:	0c21      	lsrs	r1, r4, #16
 8000260:	fbb8 fef5 	udiv	lr, r8, r5
 8000264:	fa1f f78c 	uxth.w	r7, ip
 8000268:	fb05 831e 	mls	r3, r5, lr, r8
 800026c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000270:	fb0e f107 	mul.w	r1, lr, r7
 8000274:	4299      	cmp	r1, r3
 8000276:	d90b      	bls.n	8000290 <__udivmoddi4+0x68>
 8000278:	eb1c 0303 	adds.w	r3, ip, r3
 800027c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000280:	f080 811e 	bcs.w	80004c0 <__udivmoddi4+0x298>
 8000284:	4299      	cmp	r1, r3
 8000286:	f240 811b 	bls.w	80004c0 <__udivmoddi4+0x298>
 800028a:	f1ae 0e02 	sub.w	lr, lr, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f5 	udiv	r0, r3, r5
 8000298:	fb05 3310 	mls	r3, r5, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x96>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 8108 	bcs.w	80004c4 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8105 	bls.w	80004c4 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	1be4      	subs	r4, r4, r7
 80002c0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002c4:	2100      	movs	r1, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa8>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0xc2>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80ee 	beq.w	80004ba <__udivmoddi4+0x292>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x160>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd4>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80f9 	bhi.w	80004ee <__udivmoddi4+0x2c6>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e2      	beq.n	80002d0 <__udivmoddi4+0xa8>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7df      	b.n	80002d0 <__udivmoddi4+0xa8>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xec>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 8091 	bne.w	8000440 <__udivmoddi4+0x218>
 800031e:	eba1 050c 	sub.w	r5, r1, ip
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000330:	fb07 5013 	mls	r0, r7, r3, r5
 8000334:	0c25      	lsrs	r5, r4, #16
 8000336:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800033a:	fb0e f003 	mul.w	r0, lr, r3
 800033e:	42a8      	cmp	r0, r5
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x12c>
 8000342:	eb1c 0505 	adds.w	r5, ip, r5
 8000346:	f103 38ff 	add.w	r8, r3, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x12a>
 800034c:	42a8      	cmp	r0, r5
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2c0>
 8000352:	4643      	mov	r3, r8
 8000354:	1a2d      	subs	r5, r5, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb5 f0f7 	udiv	r0, r5, r7
 800035c:	fb07 5510 	mls	r5, r7, r0, r5
 8000360:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x156>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 35ff 	add.w	r5, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x154>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2ca>
 800037c:	4628      	mov	r0, r5
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000386:	e79e      	b.n	80002c6 <__udivmoddi4+0x9e>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa20 f407 	lsr.w	r4, r0, r7
 800039a:	fa05 f301 	lsl.w	r3, r5, r1
 800039e:	431c      	orrs	r4, r3
 80003a0:	40fd      	lsrs	r5, r7
 80003a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a6:	fa00 f301 	lsl.w	r3, r0, r1
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	0c20      	lsrs	r0, r4, #16
 80003b0:	fa1f fe8c 	uxth.w	lr, ip
 80003b4:	fb09 5518 	mls	r5, r9, r8, r5
 80003b8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003bc:	fb08 f00e 	mul.w	r0, r8, lr
 80003c0:	42a8      	cmp	r0, r5
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b8>
 80003c8:	eb1c 0505 	adds.w	r5, ip, r5
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2bc>
 80003d4:	42a8      	cmp	r0, r5
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2bc>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4465      	add	r5, ip
 80003e0:	1a2d      	subs	r5, r5, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003e8:	fb09 5510 	mls	r5, r9, r0, r5
 80003ec:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	45ae      	cmp	lr, r5
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1e2>
 80003f8:	eb1c 0505 	adds.w	r5, ip, r5
 80003fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2b4>
 8000402:	45ae      	cmp	lr, r5
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2b4>
 8000406:	3802      	subs	r0, #2
 8000408:	4465      	add	r5, ip
 800040a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040e:	fba0 9402 	umull	r9, r4, r0, r2
 8000412:	eba5 050e 	sub.w	r5, r5, lr
 8000416:	42a5      	cmp	r5, r4
 8000418:	46c8      	mov	r8, r9
 800041a:	46a6      	mov	lr, r4
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x2a4>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x2a0>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x212>
 8000422:	ebb3 0208 	subs.w	r2, r3, r8
 8000426:	eb65 050e 	sbc.w	r5, r5, lr
 800042a:	fa05 f707 	lsl.w	r7, r5, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	40cd      	lsrs	r5, r1
 8000434:	431f      	orrs	r7, r3
 8000436:	e9c6 7500 	strd	r7, r5, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f103 	lsr.w	r1, r0, r3
 8000448:	fa0c fc02 	lsl.w	ip, ip, r2
 800044c:	fa25 f303 	lsr.w	r3, r5, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	430d      	orrs	r5, r1
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000460:	fb07 3011 	mls	r0, r7, r1, r3
 8000464:	0c2b      	lsrs	r3, r5, #16
 8000466:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800046a:	fb01 f00e 	mul.w	r0, r1, lr
 800046e:	4298      	cmp	r0, r3
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x260>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f101 38ff 	add.w	r8, r1, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b8>
 8000480:	4298      	cmp	r0, r3
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b8>
 8000484:	3902      	subs	r1, #2
 8000486:	4463      	add	r3, ip
 8000488:	1a1b      	subs	r3, r3, r0
 800048a:	b2ad      	uxth	r5, r5
 800048c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000490:	fb07 3310 	mls	r3, r7, r0, r3
 8000494:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000498:	fb00 f30e 	mul.w	r3, r0, lr
 800049c:	42ab      	cmp	r3, r5
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x28a>
 80004a0:	eb1c 0505 	adds.w	r5, ip, r5
 80004a4:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2b0>
 80004aa:	42ab      	cmp	r3, r5
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4465      	add	r5, ip
 80004b2:	1aed      	subs	r5, r5, r3
 80004b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0x104>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e707      	b.n	80002d0 <__udivmoddi4+0xa8>
 80004c0:	4686      	mov	lr, r0
 80004c2:	e6e5      	b.n	8000290 <__udivmoddi4+0x68>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fa      	b.n	80002be <__udivmoddi4+0x96>
 80004c8:	454b      	cmp	r3, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f8>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f8>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x28a>
 80004dc:	4620      	mov	r0, r4
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1e2>
 80004e0:	4641      	mov	r1, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x260>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b8>
 80004e8:	3b02      	subs	r3, #2
 80004ea:	4465      	add	r5, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x12c>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e709      	b.n	8000306 <__udivmoddi4+0xde>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x156>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <delay>:
#include<string.h>
#include<stdio.h>


void delay(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	e002      	b.n	800050e <delay+0x12>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3301      	adds	r3, #1
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <delay+0x28>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d9f8      	bls.n	8000508 <delay+0xc>
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	0007a11f 	.word	0x0007a11f

08000528 <I2C1_GPIOInits>:

I2C_Handle_t I2C1Handle;
//some data
uint8_t some_data[] = "We are testing I2C master Tx\n";

void I2C1_GPIOInits(void){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <I2C1_GPIOInits+0x40>)
 8000530:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000532:	2302      	movs	r3, #2
 8000534:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000536:	2301      	movs	r3, #1
 8000538:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800053a:	2301      	movs	r3, #1
 800053c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 800053e:	2304      	movs	r3, #4
 8000540:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000542:	2302      	movs	r3, #2
 8000544:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000546:	2306      	movs	r3, #6
 8000548:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f97b 	bl	8000848 <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000552:	2307      	movs	r3, #7
 8000554:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f975 	bl	8000848 <GPIO_Init>

}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40020400 	.word	0x40020400

0800056c <I2C1_Inits>:


void I2C1_Inits(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
      I2C1Handle.pI2Cx = I2C1;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <I2C1_Inits+0x2c>)
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <I2C1_Inits+0x30>)
 8000574:	601a      	str	r2, [r3, #0]
      I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <I2C1_Inits+0x2c>)
 8000578:	2201      	movs	r2, #1
 800057a:	725a      	strb	r2, [r3, #9]
      I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <I2C1_Inits+0x2c>)
 800057e:	2261      	movs	r2, #97	; 0x61
 8000580:	721a      	strb	r2, [r3, #8]
      I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <I2C1_Inits+0x2c>)
 8000584:	2200      	movs	r2, #0
 8000586:	815a      	strh	r2, [r3, #10]
      I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <I2C1_Inits+0x2c>)
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <I2C1_Inits+0x34>)
 800058c:	605a      	str	r2, [r3, #4]
      I2C_Init(&I2C1Handle);
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <I2C1_Inits+0x2c>)
 8000590:	f000 fc12 	bl	8000db8 <I2C_Init>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000058 	.word	0x20000058
 800059c:	40005400 	.word	0x40005400
 80005a0:	000186a0 	.word	0x000186a0

080005a4 <GPIO_ButtonInit>:
 // need to change the button
void GPIO_ButtonInit(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_btn;
	gpio_btn.pGPIOx = GPIOA;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <GPIO_ButtonInit+0x2c>)
 80005ac:	607b      	str	r3, [r7, #4]
	gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	723b      	strb	r3, [r7, #8]
	gpio_btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80005b2:	2300      	movs	r3, #0
 80005b4:	727b      	strb	r3, [r7, #9]
	gpio_btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_VERY_HIGH_SPEED;
 80005b6:	2303      	movs	r3, #3
 80005b8:	72bb      	strb	r3, [r7, #10]
	gpio_btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80005ba:	2300      	movs	r3, #0
 80005bc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&gpio_btn);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f941 	bl	8000848 <GPIO_Init>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020000 	.word	0x40020000

080005d4 <main>:

int main(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	//GPIO button init
	GPIO_ButtonInit();
 80005d8:	f7ff ffe4 	bl	80005a4 <GPIO_ButtonInit>
	//I2C pin inits
	I2C1_GPIOInits();
 80005dc:	f7ff ffa4 	bl	8000528 <I2C1_GPIOInits>
	//I2C peripheral configuration
	I2C1_Inits();
 80005e0:	f7ff ffc4 	bl	800056c <I2C1_Inits>
	// enable the clock for the i2cx peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80005e4:	2101      	movs	r1, #1
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <main+0x40>)
 80005e8:	f000 fd03 	bl	8000ff2 <I2C_PeripheralControl>
	//wait for button press
	while(1){
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80005ec:	bf00      	nop
 80005ee:	2100      	movs	r1, #0
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <main+0x44>)
 80005f2:	f000 facf 	bl	8000b94 <GPIO_ReadFromInputPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0f8      	beq.n	80005ee <main+0x1a>
		delay();
 80005fc:	f7ff ff7e 	bl	80004fc <delay>
		// send some data
		I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*)some_data), 0x68);
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0x48>)
 8000602:	f7ff fdf1 	bl	80001e8 <strlen>
 8000606:	4602      	mov	r2, r0
 8000608:	2368      	movs	r3, #104	; 0x68
 800060a:	4904      	ldr	r1, [pc, #16]	; (800061c <main+0x48>)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <main+0x4c>)
 800060e:	f000 fc8f 	bl	8000f30 <I2C_MasterSendData>
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000612:	e7eb      	b.n	80005ec <main+0x18>
 8000614:	40005400 	.word	0x40005400
 8000618:	40020000 	.word	0x40020000
 800061c:	20000000 	.word	0x20000000
 8000620:	20000058 	.word	0x20000058

08000624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000626:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000628:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490d      	ldr	r1, [pc, #52]	; (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0a      	ldr	r4, [pc, #40]	; (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000652:	f000 fcfd 	bl	8001050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f7ff ffbd 	bl	80005d4 <main>

0800065a <LoopForever>:

LoopForever:
  b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   r0, =_estack
 800065c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000668:	080010c0 	.word	0x080010c0
  ldr r2, =_sbss
 800066c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000670:	20000064 	.word	0x20000064

08000674 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC_IRQHandler>
	...

08000678 <GPIO_PeriClockControl>:
 * @Note              -  none
 */

// Peripheral Clock Setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDis)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if (EnorDis == ENABLE){
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d162      	bne.n	8000750 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA){
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a64      	ldr	r2, [pc, #400]	; (8000820 <GPIO_PeriClockControl+0x1a8>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN;
 8000692:	4b64      	ldr	r3, [pc, #400]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a63      	ldr	r2, [pc, #396]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOH_PCLK_DI;
	}else if (pGPIOx == GPIOI){
		GPIOI_PCLK_DI;
	}
   }
}
 800069e:	e0b9      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a61      	ldr	r2, [pc, #388]	; (8000828 <GPIO_PeriClockControl+0x1b0>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN;
 80006a8:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	4a5d      	ldr	r2, [pc, #372]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80006ae:	f043 0302 	orr.w	r3, r3, #2
 80006b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b4:	e0ae      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC){
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a5c      	ldr	r2, [pc, #368]	; (800082c <GPIO_PeriClockControl+0x1b4>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN;
 80006be:	4b59      	ldr	r3, [pc, #356]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a58      	ldr	r2, [pc, #352]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ca:	e0a3      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a58      	ldr	r2, [pc, #352]	; (8000830 <GPIO_PeriClockControl+0x1b8>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d106      	bne.n	80006e2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN;
 80006d4:	4b53      	ldr	r3, [pc, #332]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a52      	ldr	r2, [pc, #328]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e0:	e098      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a53      	ldr	r2, [pc, #332]	; (8000834 <GPIO_PeriClockControl+0x1bc>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN;
 80006ea:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a4d      	ldr	r2, [pc, #308]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80006f0:	f043 0310 	orr.w	r3, r3, #16
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f6:	e08d      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a4f      	ldr	r2, [pc, #316]	; (8000838 <GPIO_PeriClockControl+0x1c0>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN;
 8000700:	4b48      	ldr	r3, [pc, #288]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	4a47      	ldr	r2, [pc, #284]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000706:	f043 0320 	orr.w	r3, r3, #32
 800070a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070c:	e082      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG){
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a4a      	ldr	r2, [pc, #296]	; (800083c <GPIO_PeriClockControl+0x1c4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN;
 8000716:	4b43      	ldr	r3, [pc, #268]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a42      	ldr	r2, [pc, #264]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000722:	e077      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a46      	ldr	r2, [pc, #280]	; (8000840 <GPIO_PeriClockControl+0x1c8>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN;
 800072c:	4b3d      	ldr	r3, [pc, #244]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	4a3c      	ldr	r2, [pc, #240]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000736:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000738:	e06c      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a41      	ldr	r2, [pc, #260]	; (8000844 <GPIO_PeriClockControl+0x1cc>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d168      	bne.n	8000814 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN;
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a37      	ldr	r2, [pc, #220]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074e:	e061      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
	if (pGPIOx == GPIOA){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a33      	ldr	r2, [pc, #204]	; (8000820 <GPIO_PeriClockControl+0x1a8>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <GPIO_PeriClockControl+0xee>
		GPIOA_PCLK_DI;
 8000758:	4b32      	ldr	r3, [pc, #200]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	4a31      	ldr	r2, [pc, #196]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 800075e:	f023 0301 	bic.w	r3, r3, #1
 8000762:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000764:	e056      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
	}else if (pGPIOx == GPIOB){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a2f      	ldr	r2, [pc, #188]	; (8000828 <GPIO_PeriClockControl+0x1b0>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <GPIO_PeriClockControl+0x104>
		GPIOB_PCLK_DI;
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a2c      	ldr	r2, [pc, #176]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000774:	f023 0302 	bic.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077a:	e04b      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
	}else if (pGPIOx == GPIOC){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a2b      	ldr	r2, [pc, #172]	; (800082c <GPIO_PeriClockControl+0x1b4>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d106      	bne.n	8000792 <GPIO_PeriClockControl+0x11a>
		GPIOC_PCLK_DI;
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a26      	ldr	r2, [pc, #152]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 800078a:	f023 0304 	bic.w	r3, r3, #4
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000790:	e040      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
	}else if (pGPIOx == GPIOD){
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a26      	ldr	r2, [pc, #152]	; (8000830 <GPIO_PeriClockControl+0x1b8>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d106      	bne.n	80007a8 <GPIO_PeriClockControl+0x130>
		GPIOD_PCLK_DI;
 800079a:	4b22      	ldr	r3, [pc, #136]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a21      	ldr	r2, [pc, #132]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80007a0:	f023 0308 	bic.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a6:	e035      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
	}else if (pGPIOx == GPIOE){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a22      	ldr	r2, [pc, #136]	; (8000834 <GPIO_PeriClockControl+0x1bc>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d106      	bne.n	80007be <GPIO_PeriClockControl+0x146>
		GPIOE_PCLK_DI;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80007b6:	f023 0310 	bic.w	r3, r3, #16
 80007ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007bc:	e02a      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
	}else if (pGPIOx == GPIOF){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <GPIO_PeriClockControl+0x1c0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d106      	bne.n	80007d4 <GPIO_PeriClockControl+0x15c>
		GPIOF_PCLK_DI;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80007cc:	f023 0320 	bic.w	r3, r3, #32
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d2:	e01f      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
	}else if (pGPIOx == GPIOG){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a19      	ldr	r2, [pc, #100]	; (800083c <GPIO_PeriClockControl+0x1c4>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d106      	bne.n	80007ea <GPIO_PeriClockControl+0x172>
		GPIOG_PCLK_DI;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80007e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e8:	e014      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
	}else if (pGPIOx == GPIOH){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <GPIO_PeriClockControl+0x1c8>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <GPIO_PeriClockControl+0x188>
		GPIOH_PCLK_DI;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 80007f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fe:	e009      	b.n	8000814 <GPIO_PeriClockControl+0x19c>
	}else if (pGPIOx == GPIOI){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <GPIO_PeriClockControl+0x1cc>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d105      	bne.n	8000814 <GPIO_PeriClockControl+0x19c>
		GPIOI_PCLK_DI;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	4a05      	ldr	r2, [pc, #20]	; (8000824 <GPIO_PeriClockControl+0x1ac>)
 800080e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000812:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40020000 	.word	0x40020000
 8000824:	40023800 	.word	0x40023800
 8000828:	40020400 	.word	0x40020400
 800082c:	40020800 	.word	0x40020800
 8000830:	40020c00 	.word	0x40020c00
 8000834:	40021000 	.word	0x40021000
 8000838:	40021400 	.word	0x40021400
 800083c:	40021800 	.word	0x40021800
 8000840:	40021c00 	.word	0x40021c00
 8000844:	40022000 	.word	0x40022000

08000848 <GPIO_Init>:
 * @Note              -  none
 */

// Peripheral Clock Setup
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

	//enable the clock;
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff0c 	bl	8000678 <GPIO_PeriClockControl>
	//1. Configure the mode of the GPIO pin

	// Driver specific so write macros in the gpio driver header file
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	795b      	ldrb	r3, [r3, #5]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d822      	bhi.n	80008ae <GPIO_Init+0x66>
		// Non interrupt mode
		// configure the pin mode to specific bit field in port mode register due to the pin number
		temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	795b      	ldrb	r3, [r3, #5]
 800086c:	461a      	mov	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2103      	movs	r1, #3
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	4619      	mov	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	400a      	ands	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6819      	ldr	r1, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	430a      	orrs	r2, r1
 80008a6:	601a      	str	r2, [r3, #0]
		temp = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e0cb      	b.n	8000a46 <GPIO_Init+0x1fe>
	}else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	795b      	ldrb	r3, [r3, #5]
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d117      	bne.n	80008e6 <GPIO_Init+0x9e>
			//1. Configure the FTSR
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008b6:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <GPIO_Init+0x19c>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	7912      	ldrb	r2, [r2, #4]
 80008be:	4611      	mov	r1, r2
 80008c0:	2201      	movs	r2, #1
 80008c2:	408a      	lsls	r2, r1
 80008c4:	4611      	mov	r1, r2
 80008c6:	4a47      	ldr	r2, [pc, #284]	; (80009e4 <GPIO_Init+0x19c>)
 80008c8:	430b      	orrs	r3, r1
 80008ca:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI ->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008cc:	4b45      	ldr	r3, [pc, #276]	; (80009e4 <GPIO_Init+0x19c>)
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	7912      	ldrb	r2, [r2, #4]
 80008d4:	4611      	mov	r1, r2
 80008d6:	2201      	movs	r2, #1
 80008d8:	408a      	lsls	r2, r1
 80008da:	43d2      	mvns	r2, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a41      	ldr	r2, [pc, #260]	; (80009e4 <GPIO_Init+0x19c>)
 80008e0:	400b      	ands	r3, r1
 80008e2:	6093      	str	r3, [r2, #8]
 80008e4:	e035      	b.n	8000952 <GPIO_Init+0x10a>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	795b      	ldrb	r3, [r3, #5]
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	d117      	bne.n	800091e <GPIO_Init+0xd6>
			//1. Configure the RTSR
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ee:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <GPIO_Init+0x19c>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	7912      	ldrb	r2, [r2, #4]
 80008f6:	4611      	mov	r1, r2
 80008f8:	2201      	movs	r2, #1
 80008fa:	408a      	lsls	r2, r1
 80008fc:	4611      	mov	r1, r2
 80008fe:	4a39      	ldr	r2, [pc, #228]	; (80009e4 <GPIO_Init+0x19c>)
 8000900:	430b      	orrs	r3, r1
 8000902:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI ->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000904:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <GPIO_Init+0x19c>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	7912      	ldrb	r2, [r2, #4]
 800090c:	4611      	mov	r1, r2
 800090e:	2201      	movs	r2, #1
 8000910:	408a      	lsls	r2, r1
 8000912:	43d2      	mvns	r2, r2
 8000914:	4611      	mov	r1, r2
 8000916:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <GPIO_Init+0x19c>)
 8000918:	400b      	ands	r3, r1
 800091a:	60d3      	str	r3, [r2, #12]
 800091c:	e019      	b.n	8000952 <GPIO_Init+0x10a>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b06      	cmp	r3, #6
 8000924:	d115      	bne.n	8000952 <GPIO_Init+0x10a>
			//1. Configure both  FTSR and RTSR
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <GPIO_Init+0x19c>)
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	7912      	ldrb	r2, [r2, #4]
 800092e:	4611      	mov	r1, r2
 8000930:	2201      	movs	r2, #1
 8000932:	408a      	lsls	r2, r1
 8000934:	4611      	mov	r1, r2
 8000936:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <GPIO_Init+0x19c>)
 8000938:	430b      	orrs	r3, r1
 800093a:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit
			EXTI ->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <GPIO_Init+0x19c>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7912      	ldrb	r2, [r2, #4]
 8000944:	4611      	mov	r1, r2
 8000946:	2201      	movs	r2, #1
 8000948:	408a      	lsls	r2, r1
 800094a:	4611      	mov	r1, r2
 800094c:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <GPIO_Init+0x19c>)
 800094e:	430b      	orrs	r3, r1
 8000950:	60d3      	str	r3, [r2, #12]
		}

		//2.  Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber)/4;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	089b      	lsrs	r3, r3, #2
 8000958:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber)%4;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <GPIO_Init+0x1a0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d04e      	beq.n	8000a0c <GPIO_Init+0x1c4>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <GPIO_Init+0x1a4>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d032      	beq.n	80009de <GPIO_Init+0x196>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <GPIO_Init+0x1a8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d02b      	beq.n	80009da <GPIO_Init+0x192>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <GPIO_Init+0x1ac>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d024      	beq.n	80009d6 <GPIO_Init+0x18e>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <GPIO_Init+0x1b0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d01d      	beq.n	80009d2 <GPIO_Init+0x18a>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <GPIO_Init+0x1b4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d016      	beq.n	80009ce <GPIO_Init+0x186>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <GPIO_Init+0x1b8>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d00f      	beq.n	80009ca <GPIO_Init+0x182>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <GPIO_Init+0x1bc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d008      	beq.n	80009c6 <GPIO_Init+0x17e>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <GPIO_Init+0x1c0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <GPIO_Init+0x17a>
 80009be:	2308      	movs	r3, #8
 80009c0:	e025      	b.n	8000a0e <GPIO_Init+0x1c6>
 80009c2:	2300      	movs	r3, #0
 80009c4:	e023      	b.n	8000a0e <GPIO_Init+0x1c6>
 80009c6:	2307      	movs	r3, #7
 80009c8:	e021      	b.n	8000a0e <GPIO_Init+0x1c6>
 80009ca:	2306      	movs	r3, #6
 80009cc:	e01f      	b.n	8000a0e <GPIO_Init+0x1c6>
 80009ce:	2305      	movs	r3, #5
 80009d0:	e01d      	b.n	8000a0e <GPIO_Init+0x1c6>
 80009d2:	2304      	movs	r3, #4
 80009d4:	e01b      	b.n	8000a0e <GPIO_Init+0x1c6>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e019      	b.n	8000a0e <GPIO_Init+0x1c6>
 80009da:	2302      	movs	r3, #2
 80009dc:	e017      	b.n	8000a0e <GPIO_Init+0x1c6>
 80009de:	2301      	movs	r3, #1
 80009e0:	e015      	b.n	8000a0e <GPIO_Init+0x1c6>
 80009e2:	bf00      	nop
 80009e4:	40013c00 	.word	0x40013c00
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40021400 	.word	0x40021400
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40021c00 	.word	0x40021c00
 8000a08:	40022000 	.word	0x40022000
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN;
 8000a10:	4b5d      	ldr	r3, [pc, #372]	; (8000b88 <GPIO_Init+0x340>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	4a5c      	ldr	r2, [pc, #368]	; (8000b88 <GPIO_Init+0x340>)
 8000a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp1] = portcode << (temp2 *4);
 8000a1c:	7c7a      	ldrb	r2, [r7, #17]
 8000a1e:	7cbb      	ldrb	r3, [r7, #18]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	fa02 f103 	lsl.w	r1, r2, r3
 8000a26:	4a59      	ldr	r2, [pc, #356]	; (8000b8c <GPIO_Init+0x344>)
 8000a28:	7cfb      	ldrb	r3, [r7, #19]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]



		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a30:	4b57      	ldr	r3, [pc, #348]	; (8000b90 <GPIO_Init+0x348>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	7912      	ldrb	r2, [r2, #4]
 8000a38:	4611      	mov	r1, r2
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	408a      	lsls	r2, r1
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a53      	ldr	r2, [pc, #332]	; (8000b90 <GPIO_Init+0x348>)
 8000a42:	430b      	orrs	r3, r1
 8000a44:	6013      	str	r3, [r2, #0]
	}


	temp = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
	//2. Configure the speed
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	799b      	ldrb	r3, [r3, #6]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	791b      	ldrb	r3, [r3, #4]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	791b      	ldrb	r3, [r3, #4]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2103      	movs	r1, #3
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	4619      	mov	r1, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	400a      	ands	r2, r1
 8000a78:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	6899      	ldr	r1, [r3, #8]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	430a      	orrs	r2, r1
 8000a88:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]

	//3. Configure the pull up pull down setting
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl) << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	79db      	ldrb	r3, [r3, #7]
 8000a92:	461a      	mov	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	791b      	ldrb	r3, [r3, #4]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clearing
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	791b      	ldrb	r3, [r3, #4]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2103      	movs	r1, #3
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	400a      	ands	r2, r1
 8000abc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68d9      	ldr	r1, [r3, #12]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	430a      	orrs	r2, r1
 8000acc:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
	//4. Configure the output type
	temp = ((pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7a1b      	ldrb	r3, [r3, #8]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	791b      	ldrb	r3, [r3, #4]
 8000aec:	4619      	mov	r1, r3
 8000aee:	2301      	movs	r3, #1
 8000af0:	408b      	lsls	r3, r1
 8000af2:	43db      	mvns	r3, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	400a      	ands	r2, r1
 8000afc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6859      	ldr	r1, [r3, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
	//5. Configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	795b      	ldrb	r3, [r3, #5]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d131      	bne.n	8000b7e <GPIO_Init+0x336>
	{
		// configure the alt function register
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	791b      	ldrb	r3, [r3, #4]
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	7c3a      	ldrb	r2, [r7, #16]
 8000b32:	3208      	adds	r2, #8
 8000b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	7c3a      	ldrb	r2, [r7, #16]
 8000b4c:	4001      	ands	r1, r0
 8000b4e:	3208      	adds	r2, #8
 8000b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << ( 4 * temp2 ) );
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	7c3a      	ldrb	r2, [r7, #16]
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	7a5b      	ldrb	r3, [r3, #9]
 8000b64:	461a      	mov	r2, r3
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	7c3a      	ldrb	r2, [r7, #16]
 8000b76:	4301      	orrs	r1, r0
 8000b78:	3208      	adds	r2, #8
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40013800 	.word	0x40013800
 8000b90:	40013c00 	.word	0x40013c00

08000b94 <GPIO_ReadFromInputPin>:



// Data Read and Write
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	691a      	ldr	r2, [r3, #16]
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]

  return value;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

// Helper functions
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= (1 << I2C_CR1_START);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	70fb      	strb	r3, [r7, #3]
	// make space for the R/W bit
	SlaveAddr = SlaveAddr << 1;
 8000be8:	78fb      	ldrb	r3, [r7, #3]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	70fb      	strb	r3, [r7, #3]
    SlaveAddr &= ~(1); // SlaveAddr is slave address +r/w bit
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	f023 0301 	bic.w	r3, r3, #1
 8000bf4:	70fb      	strb	r3, [r7, #3]
    pI2Cx->I2C_DR = SlaveAddr;
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	611a      	str	r2, [r3, #16]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx){
 8000c06:	b480      	push	{r7}
 8000c08:	b085      	sub	sp, #20
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	// This bit is cleared by software reading SR1 register followed reading SR2, or by hardware when PE=0
	uint32_t dummyRead = pI2Cx ->I2C_SR1;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx ->I2C_SR2;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
	...

08000c44 <I2C_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDis){
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	{
		if (EnorDis == ENABLE){
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d140      	bne.n	8000cd8 <I2C_PeriClockControl+0x94>
				if (pI2Cx == I2C1){
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <I2C_PeriClockControl+0xa0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d106      	bne.n	8000c6c <I2C_PeriClockControl+0x28>
					I2C1_PCLK_EN;
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
					I2C3_PCLK_DI;
				}
		   }
	}
	}
}
 8000c6a:	e035      	b.n	8000cd8 <I2C_PeriClockControl+0x94>
				}else if (pI2Cx == I2C2){
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <I2C_PeriClockControl+0xa8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d106      	bne.n	8000c82 <I2C_PeriClockControl+0x3e>
					I2C2_PCLK_EN;
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c80:	e02a      	b.n	8000cd8 <I2C_PeriClockControl+0x94>
				}else if (pI2Cx == I2C3){
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <I2C_PeriClockControl+0xac>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d106      	bne.n	8000c98 <I2C_PeriClockControl+0x54>
					I2C3_PCLK_EN;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a16      	ldr	r2, [pc, #88]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c96:	e01f      	b.n	8000cd8 <I2C_PeriClockControl+0x94>
				if (pI2Cx == I2C1){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <I2C_PeriClockControl+0xa0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d106      	bne.n	8000cae <I2C_PeriClockControl+0x6a>
					I2C1_PCLK_DI;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cac:	e014      	b.n	8000cd8 <I2C_PeriClockControl+0x94>
				}else if (pI2Cx == I2C2){
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <I2C_PeriClockControl+0xa8>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d106      	bne.n	8000cc4 <I2C_PeriClockControl+0x80>
					I2C2_PCLK_DI;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000cbc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cc2:	e009      	b.n	8000cd8 <I2C_PeriClockControl+0x94>
				}else if (pI2Cx == I2C3){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <I2C_PeriClockControl+0xac>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d105      	bne.n	8000cd8 <I2C_PeriClockControl+0x94>
					I2C3_PCLK_DI;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <I2C_PeriClockControl+0xa4>)
 8000cd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000cd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40005800 	.word	0x40005800
 8000cf0:	40005c00 	.word	0x40005c00

08000cf4 <RCC_GetPLLOutputClock>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
uint32_t RCC_GetPLLOutputClock(void){
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
	...

08000d04 <RCC_GetPCLK1Value>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
uint32_t RCC_GetPCLK1Value(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;
	clksrc = ((RCC->RCC_CFGR >> 2) & 0x03);
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <RCC_GetPCLK1Value+0xa0>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	727b      	strb	r3, [r7, #9]
	if (clksrc == 0){
 8000d18:	7a7b      	ldrb	r3, [r7, #9]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000d1e:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <RCC_GetPCLK1Value+0xa4>)
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e00b      	b.n	8000d3c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 1){
 8000d24:	7a7b      	ldrb	r3, [r7, #9]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d102      	bne.n	8000d30 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <RCC_GetPCLK1Value+0xa8>)
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	e005      	b.n	8000d3c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2){
 8000d30:	7a7b      	ldrb	r3, [r7, #9]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d102      	bne.n	8000d3c <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000d36:	f7ff ffdd 	bl	8000cf4 <RCC_GetPLLOutputClock>
 8000d3a:	60f8      	str	r0, [r7, #12]
	}


	// find the value of the AHB prescaler (more infor in the data sheet)
	 temp = ((RCC->RCC_CFGR >> 4) &0xF);
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <RCC_GetPCLK1Value+0xa0>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	091b      	lsrs	r3, r3, #4
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	723b      	strb	r3, [r7, #8]
	 if  (temp <8){
 8000d4a:	7a3b      	ldrb	r3, [r7, #8]
 8000d4c:	2b07      	cmp	r3, #7
 8000d4e:	d802      	bhi.n	8000d56 <RCC_GetPCLK1Value+0x52>
		 ahbp = 1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	72fb      	strb	r3, [r7, #11]
 8000d54:	e005      	b.n	8000d62 <RCC_GetPCLK1Value+0x5e>
	 }
	 else {
		 ahbp = AHB_PreScaler[temp-9];
 8000d56:	7a3b      	ldrb	r3, [r7, #8]
 8000d58:	3b09      	subs	r3, #9
 8000d5a:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <RCC_GetPCLK1Value+0xac>)
 8000d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d60:	72fb      	strb	r3, [r7, #11]
	 }

	 // find the value of the APB1 prescaler (more infor in the data sheet)
	 temp = ((RCC->RCC_CFGR >> 10) &0x7);
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <RCC_GetPCLK1Value+0xa0>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	0a9b      	lsrs	r3, r3, #10
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	723b      	strb	r3, [r7, #8]
	 if  (temp <4){
 8000d70:	7a3b      	ldrb	r3, [r7, #8]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d802      	bhi.n	8000d7c <RCC_GetPCLK1Value+0x78>
		 apb1p = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	72bb      	strb	r3, [r7, #10]
 8000d7a:	e005      	b.n	8000d88 <RCC_GetPCLK1Value+0x84>
	 }
	 else {
		 apb1p = APB1_PreScaler[temp-4];
 8000d7c:	7a3b      	ldrb	r3, [r7, #8]
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <RCC_GetPCLK1Value+0xb0>)
 8000d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d86:	72bb      	strb	r3, [r7, #10]
	 }

	 // calculate PCLK1
	 pclk1 = (SystemClk/ahbp)/apb1p;
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d90:	7abb      	ldrb	r3, [r7, #10]
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	00f42400 	.word	0x00f42400
 8000dac:	007a1200 	.word	0x007a1200
 8000db0:	20000020 	.word	0x20000020
 8000db4:	20000034 	.word	0x20000034

08000db8 <I2C_Init>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
	//enable the clock for I2Cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff3a 	bl	8000c44 <I2C_PeriClockControl>
	//1. Control the ACKING bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7a5b      	ldrb	r3, [r3, #9]
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR1 = tempreg;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	601a      	str	r2, [r3, #0]

	//2. Configure the CR2_FREQ
	tempreg = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 8000dea:	f7ff ff8b 	bl	8000d04 <RCC_GetPCLK1Value>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a4d      	ldr	r2, [pc, #308]	; (8000f28 <I2C_Init+0x170>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	0c9b      	lsrs	r3, r3, #18
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR2 = tempreg & 0x3F;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e08:	605a      	str	r2, [r3, #4]

	//3. Configure the OAR1 ( store the slave address - more information check data sheet)
	tempreg = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD71);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7a1b      	ldrb	r3, [r3, #8]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	461a      	mov	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
	//bit 14 is required to keep HIGH - due to the reference manual
	tempreg |= (1 << 14);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e22:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_OAR1 = tempreg;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	609a      	str	r2, [r3, #8]

	//4. Configure the CCR bit field of the CCR register
	//a. CCR calculation
	uint16_t ccr_value = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle ->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	4a3c      	ldr	r2, [pc, #240]	; (8000f2c <I2C_Init+0x174>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d80f      	bhi.n	8000e5e <I2C_Init+0xa6>
		// mode is standard mode
		// calculate using the formula present in the reference manual
		ccr_value = (RCC_GetPCLK1Value()/(2*pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000e3e:	f7ff ff61 	bl	8000d04 <RCC_GetPCLK1Value>
 8000e42:	4602      	mov	r2, r0
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	817b      	strh	r3, [r7, #10]
		//program ccr_value to the CRR bit field in CRR register
		tempreg |= (ccr_value & 0xFFF);
 8000e50:	897b      	ldrh	r3, [r7, #10]
 8000e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e02d      	b.n	8000eba <I2C_Init+0x102>
	}else{
		// mode is fast mode
		// Need to configure the fast mode
		tempreg |= (1 << I2C_CCR_FS);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e64:	60fb      	str	r3, [r7, #12]
		// Need to configure the duty cycle
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	895b      	ldrh	r3, [r3, #10]
 8000e6a:	039b      	lsls	r3, r3, #14
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

		if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	895b      	ldrh	r3, [r3, #10]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10b      	bne.n	8000e94 <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value()/(3*pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000e7c:	f7ff ff42 	bl	8000d04 <RCC_GetPCLK1Value>
 8000e80:	4601      	mov	r1, r0
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e90:	817b      	strh	r3, [r7, #10]
 8000e92:	e00c      	b.n	8000eae <I2C_Init+0xf6>
		}else{
			ccr_value = (RCC_GetPCLK1Value()/(25*pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000e94:	f7ff ff36 	bl	8000d04 <RCC_GetPCLK1Value>
 8000e98:	4601      	mov	r1, r0
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009a      	lsls	r2, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eac:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000eae:	897b      	ldrh	r3, [r7, #10]
 8000eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->I2C_CCR = tempreg;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	61da      	str	r2, [r3, #28]

	//5. TRISE configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <I2C_Init+0x174>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d809      	bhi.n	8000ee0 <I2C_Init+0x128>
		// mode is standard mode

		tempreg = (RCC_GetPCLK1Value()/1000000U) + 1;
 8000ecc:	f7ff ff1a 	bl	8000d04 <RCC_GetPCLK1Value>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <I2C_Init+0x170>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	0c9b      	lsrs	r3, r3, #18
 8000eda:	3301      	adds	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	e015      	b.n	8000f0c <I2C_Init+0x154>
	}else{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value()*300)/10000000000U) + 1;
 8000ee0:	f7ff ff10 	bl	8000d04 <RCC_GetPCLK1Value>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	2200      	movs	r2, #0
 8000ef0:	461c      	mov	r4, r3
 8000ef2:	4615      	mov	r5, r2
 8000ef4:	a30a      	add	r3, pc, #40	; (adr r3, 8000f20 <I2C_Init+0x168>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	4620      	mov	r0, r4
 8000efc:	4629      	mov	r1, r5
 8000efe:	f7ff f97b 	bl	80001f8 <__aeabi_uldivmod>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4613      	mov	r3, r2
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->I2C_TRISE = (tempreg & 0x3F);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f16:	621a      	str	r2, [r3, #32]
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f20:	540be400 	.word	0x540be400
 8000f24:	00000002 	.word	0x00000002
 8000f28:	431bde83 	.word	0x431bde83
 8000f2c:	000186a0 	.word	0x000186a0

08000f30 <I2C_MasterSendData>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	70fb      	strb	r3, [r7, #3]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fe3b 	bl	8000bbe <I2C_GenerateStartCondition>

	//2. Confirm the start generation is completed by checking the SB flag in SR1
    //   Note: Until SB is clear SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 8000f48:	bf00      	nop
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f869 	bl	8001028 <I2C_GetFlagStatus>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f6      	beq.n	8000f4a <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/w bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx,SlaveAddr);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	78fa      	ldrb	r2, [r7, #3]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fe39 	bl	8000bdc <I2C_ExecuteAddressPhase>

	//4. Confirm that address phase is complete by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 8000f6a:	bf00      	nop
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2102      	movs	r1, #2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f858 	bl	8001028 <I2C_GetFlagStatus>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f6      	beq.n	8000f6c <I2C_MasterSendData+0x3c>
	//5. Clear the ADDR flag according to its software sequence
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe3f 	bl	8000c06 <I2C_ClearADDRFlag>

	//6. Send the data until Len becomes 0
	while(Len >0){
 8000f88:	e013      	b.n	8000fb2 <I2C_MasterSendData+0x82>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)){
			pI2CHandle->pI2Cx->I2C_DR = *pTxbuffer;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	781a      	ldrb	r2, [r3, #0]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	611a      	str	r2, [r3, #16]
			pTxbuffer++;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	3301      	adds	r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
			Len--;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)){
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f83e 	bl	8001028 <I2C_GetFlagStatus>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0eb      	beq.n	8000f8a <I2C_MasterSendData+0x5a>
	while(Len >0){
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f3      	bne.n	8000fa0 <I2C_MasterSendData+0x70>
	}

	/*7. When Len becomes zero wait for TXE = 1 and BTF = 1 before generating the STOP condition
	 *   Note: TXE = 1, BTF = 1, means that both SR and DR are empty and next tranmission should begin
	 *   When BTF = 1 SCL will be stretched (pull to LOW)*/
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8000fb8:	bf00      	nop
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f831 	bl	8001028 <I2C_GetFlagStatus>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f6      	beq.n	8000fba <I2C_MasterSendData+0x8a>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 8000fcc:	bf00      	nop
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f827 	bl	8001028 <I2C_GetFlagStatus>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f6      	beq.n	8000fce <I2C_MasterSendData+0x9e>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: Generating STOP condition auto clears the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe1d 	bl	8000c24 <I2C_GenerateStopCondition>


}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <I2C_PeripheralControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDis){
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	70fb      	strb	r3, [r7, #3]
	if (EnorDis == 1){
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d106      	bne.n	8001012 <I2C_PeripheralControl+0x20>
			pI2Cx->I2C_CR1 |= (1 << I2C_CR1_PE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]
		}else{
			pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
		}
}
 8001010:	e005      	b.n	800101e <I2C_PeripheralControl+0x2c>
			pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f023 0201 	bic.w	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <I2C_GetFlagStatus>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	if(pI2Cx->I2C_SR1 & FlagName){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4013      	ands	r3, r2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <I2C_GetFlagStatus+0x1a>
			return FLAG_SET;
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <I2C_GetFlagStatus+0x1c>
		}
		    return FLAG_RESET;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
	...

08001050 <__libc_init_array>:
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	4d0d      	ldr	r5, [pc, #52]	; (8001088 <__libc_init_array+0x38>)
 8001054:	4c0d      	ldr	r4, [pc, #52]	; (800108c <__libc_init_array+0x3c>)
 8001056:	1b64      	subs	r4, r4, r5
 8001058:	10a4      	asrs	r4, r4, #2
 800105a:	2600      	movs	r6, #0
 800105c:	42a6      	cmp	r6, r4
 800105e:	d109      	bne.n	8001074 <__libc_init_array+0x24>
 8001060:	4d0b      	ldr	r5, [pc, #44]	; (8001090 <__libc_init_array+0x40>)
 8001062:	4c0c      	ldr	r4, [pc, #48]	; (8001094 <__libc_init_array+0x44>)
 8001064:	f000 f818 	bl	8001098 <_init>
 8001068:	1b64      	subs	r4, r4, r5
 800106a:	10a4      	asrs	r4, r4, #2
 800106c:	2600      	movs	r6, #0
 800106e:	42a6      	cmp	r6, r4
 8001070:	d105      	bne.n	800107e <__libc_init_array+0x2e>
 8001072:	bd70      	pop	{r4, r5, r6, pc}
 8001074:	f855 3b04 	ldr.w	r3, [r5], #4
 8001078:	4798      	blx	r3
 800107a:	3601      	adds	r6, #1
 800107c:	e7ee      	b.n	800105c <__libc_init_array+0xc>
 800107e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001082:	4798      	blx	r3
 8001084:	3601      	adds	r6, #1
 8001086:	e7f2      	b.n	800106e <__libc_init_array+0x1e>
 8001088:	080010b8 	.word	0x080010b8
 800108c:	080010b8 	.word	0x080010b8
 8001090:	080010b8 	.word	0x080010b8
 8001094:	080010bc 	.word	0x080010bc

08001098 <_init>:
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109a:	bf00      	nop
 800109c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109e:	bc08      	pop	{r3}
 80010a0:	469e      	mov	lr, r3
 80010a2:	4770      	bx	lr

080010a4 <_fini>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	bf00      	nop
 80010a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010aa:	bc08      	pop	{r3}
 80010ac:	469e      	mov	lr, r3
 80010ae:	4770      	bx	lr
